        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*************************************************************************************
        -:    2: * CS362 Assignment 3
        -:    3: * Name: Christina Curran
        -:    4: * File: cardtest3.c
        -:    5: * **********************************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <assert.h>
        -:   14:
        -:   15://Village card test
        1:   16:void main(){
        -:   17:	
        1:   18:	int numPlayers = 2;
        1:   19:	int seed = 1000;
        -:   20:	//initialize game, as done in playdom.c and add test game
        -:   21:	struct gameState gm,test;
        1:   22:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   23:		     sea_hag, tribute, smithy};
        1:   24:	int handPos = 0;
        1:   25:	int choice1 = 0;
        1:   26:	int choice2 = 0;
        1:   27:	int choice3 = 0;
        1:   28:	int bonus = 0;
        1:   29:	int player = 0;
        -:   30:	
        -:   31:	//starting a game and cards
        1:   32:	initializeGame (numPlayers, k, seed, &gm);	
        -:   33:
        1:   34:	printf("\n**Testing Village card**\n");
        -:   35:
        -:   36:	//copy current game into a test game variable for comparison
        1:   37:	memcpy(&test, &gm, sizeof(struct gameState));
        -:   38:	//test Village card
        1:   39:	cardEffect(village, choice1, choice2, choice3, &gm, handPos, &bonus);
        1:   40:	player = whoseTurn(&test);
        -:   41:
        -:   42:	//check player hand count
        1:   43:	if(test.handCount[player]+1 == gm.handCount[player]){
    #####:   44:		printf ("Player Hand Count: PASS\n");
        -:   45:	}
        -:   46:	else{
        1:   47:		printf ("Player Hand Count: FAIL\n");
        1:   48:		printf("Expected: %d\n", (test.handCount[player]+1));
        1:   49:		printf("Actual: %d\n", gm.handCount[player]);
        -:   50:}
        -:   51:
        -:   52:	//check player's hand
        1:   53:	if(gm.hand[player][test.handCount[player]] != -1){
    #####:   54:		printf ("Card added to player's hand: PASS\n");
        -:   55:	}
        -:   56:	else{
        1:   57:		printf ("Card added to player's hand: FAIL\n");
        -:   58:}
        -:   59:
        -:   60:	//check if player played a card
        1:   61:	if(test.playedCardCount+1 == gm.playedCardCount){
        1:   62:		printf("Played Village card: PASS\n");
        -:   63:	}
        -:   64:	else{
    #####:   65:		printf("Played Village card: FAIL\n");
    #####:   66:		printf("Expected: %d\n", (test.playedCardCount+1));
    #####:   67:		printf("Actual: %d\n", gm.playedCardCount);
        -:   68:}
        -:   69:
        -:   70:	//check if card discarded
        1:   71:	if(test.discardCount[player]+1 == gm.discardCount[player]){
    #####:   72:		printf("Village card discarded: PASS\n");
        -:   73:	}
        -:   74:	else{
        1:   75:		printf("Village card discarded: FAIL\n");
        1:   76:		printf("Expected: %d\n", (test.discardCount[player]+1));
        1:   77:		printf("Actual: %d\n", gm.discardCount[player]);
        -:   78:}
        -:   79:
        -:   80:	//Check if Village action added
        1:   81:	if((test.numActions+3) == gm.numActions){
    #####:   82:		printf("Actions added: PASS\n");
        -:   83:	}
        -:   84:	else{
        1:   85:		printf("Actions added: FAIL\n");
        1:   86:		printf("Expected: %d\n", (test.numActions+3));
        1:   87:		printf("Actual: %d\n", gm.numActions);
        -:   88:}
        1:   89:	printf("**Village card testing complete**\n\n");
        1:   90:}
